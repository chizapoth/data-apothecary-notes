{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Cheatsheet: Pandas DataFrame\"\n",
        "description: |\n",
        "  Refer to the jupyter notebook for rendered code.\n",
        "author: \"Chi Zhang\"\n",
        "date: \"2025-02-12\"\n",
        "categories: [Python]\n",
        "sidebar: false\n",
        "code-block-bg: true\n",
        "code-block-border-left: true\n",
        "jupyter: python3\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    code-fold: false\n",
        "    code-tools: false\n",
        "    code-annotations: select\n",
        "---\n",
        "\n",
        "# Data analysis workflow\n",
        "\n",
        "::: {.callout-note}\n",
        "\n",
        "When working with data that need to be transformed, create a copy so that the original data is not affected. \n",
        "\n",
        "```python\n",
        "planet_sub = planets.copy()[planets['Mass']>15]\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "### Initial summary\n",
        "\n",
        "```python\n",
        "df.head()\n",
        "df.columns\n",
        "df.shape\n",
        "df.describe()\n",
        "df.dtypes\n",
        "df.isnull().sum() # check missing\n",
        "```\n",
        "\n",
        "Unique values, count frequency\n",
        "\n",
        "```python\n",
        "df['col'].unique()\n",
        "df['col'].value_counts() # same as R table()\n",
        "```\n",
        "\n",
        "\n",
        "### Clean\n",
        "\n",
        "```python\n",
        "# rename column\n",
        "df = df.rename(columns = {'old_name': 'new_name'})\n",
        "```\n",
        "\n",
        "Convert data type, rounding\n",
        "\n",
        "```python\n",
        "df['num_col'].round(2) # 2 digits\n",
        "df['num_col'].astype(str) # change into string\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "Missing value handling\n",
        "\n",
        "```python\n",
        "df = df.dropna() # drop na\n",
        "df['col'] = df['col'].fillna(value) # impute with known value\n",
        "df['col'] = df['col'].fillna(df['col'].mean()) # mean imputation\n",
        "```\n",
        "\n",
        "### Subsetting, filtering\n",
        "\n",
        "```python\n",
        "df_sub = df[['col1', 'col2']]\n",
        "df_filter = df[df['col1'] < 25]\n",
        "```\n",
        "\n",
        "Might have to reset index afterwards, `df_new.reset_index()`\n",
        "\n",
        "### Transform\n",
        "\n",
        "Create new variable based on another\n",
        "\n",
        "```python\n",
        "# solution 1\n",
        "planet_sub['pre2005'] = 'yes'\n",
        "planet_sub.loc[planet_sub.year > 2005, \"pre2005\"] = \"no\"\n",
        "# solution 2\n",
        "planet_sub['pre2005'] = np.where(planet_sub['year']<2005, 'yes', 'no')\n",
        "```\n",
        "\n",
        "Sort\n",
        "\n",
        "```python\n",
        "planet_sub.sort_values('Mass', ascending=False)\n",
        "planet_sub.sort_values(by = ['orbital_period', 'Mass'], ascending=False)\n",
        "```\n",
        "\n",
        "Transform with `lambda`\n",
        "\n",
        "```python\n",
        "df.transform(lambda x: x-x.mean())\n",
        "```\n",
        "\n",
        "\n",
        "## Visualization (basics)\n",
        "\n",
        "```python\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# histogram\n",
        "sns.histplot(df['numvar'])\n",
        "plt.show()\n",
        "\n",
        "# boxplot\n",
        "sns.boxplot(df['numvar'])\n",
        "\n",
        "# barplot (categorical, raw data)\n",
        "sns.countplot(df['cate_var'])\n",
        "\n",
        "# scatter (2 var)\n",
        "sns.scatterplot(x = 'var1', y = 'var2', hue = 'var3', data = df)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Details\n",
        "\n",
        "## Create a dataframe\n",
        "\n",
        "There are multiple ways to do it: \n",
        "\n",
        "* `pd.Series`\n",
        "* dictionary\n",
        "* 2-d array\n",
        "* combining mixed types \n",
        "\n",
        "### Create a dataframe by **combining Series**"
      ],
      "id": "4168ca41"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# define population\n",
        "population_dict = {'California': 38332521,\n",
        "                   'Texas': 26448193,\n",
        "                   'New York': 19651127,\n",
        "                   'Florida': 19552860,\n",
        "                   'Illinois': 12882135}\n",
        "population = pd.Series(population_dict)\n",
        "\n",
        "# define area\n",
        "area_dict = {'California': 423967,\n",
        "             'Texas': 695662,\n",
        "             'New York': 141297,\n",
        "             'Florida': 170312,\n",
        "             'Illinois': 149995}\n",
        "area = pd.Series(area_dict)\n",
        "\n",
        "# now combine these two\n",
        "states = pd.DataFrame({\n",
        "    'population': population,\n",
        "    'area': area\n",
        "})\n",
        "states"
      ],
      "id": "680fc6dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "It is convenient to create a new column based on other columns, \n",
        "\n",
        "```python\n",
        "states['density'] = states['population'] / states['area']\n",
        "```\n",
        "\n",
        "### Create a df from dictionary"
      ],
      "id": "e7a8dee0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.DataFrame([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}])"
      ],
      "id": "df1ff179",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Create a df from a 2-d array"
      ],
      "id": "ba3ff87d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "pd.DataFrame(np.random.rand(3, 2),\n",
        "             columns=['foo', 'bar'],\n",
        "             index=['a', 'b', 'c'])"
      ],
      "id": "0f1b9a7e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Mix types combination\n",
        "\n",
        "This is equivalent to R `cbind`. Assuming that we have the following **np.array**: `X` (n by 2), `y` (n by 1), `yhat` (n by 1). We want to combine them together for easier visualization. \n",
        "\n",
        "* use `np.column.stack(())` first, then convert into pandas dataframe; This is similar to creating a numeric matrix, then convert it to dataframe in R.\n",
        "* or, create a dataframe based on one of the variables first; then attach a second variable using `df['new_var'] = var2`. This is similar to `df$new_var <- var2` in R.\n",
        "\n",
        "```python\n",
        "# option 1\n",
        "mat = np.column_stack((X, y, yhat)) # double bracket\n",
        "df1 = pd.DataFrame(mat, columns = ['x1', 'x2', 'y', 'yhat'])\n",
        "\n",
        "# option 2\n",
        "df2 = pd.DataFrame(X, columns = ['x1', 'x2'])\n",
        "df2['y'] = y\n",
        "df2['yhat'] = yhat\n",
        "```\n",
        "\n",
        "## Create new columns\n",
        "\n",
        "After the above steps (in previous section), we want to also create an indicator based on two of the variables. Can use `np.where` function.\n",
        "\n",
        "```python\n",
        "df['mismatch'] = np.where(df['y'] != df['yhat'], 1, 0)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Selection\n",
        "\n",
        "* rownames: index\n",
        "* colnames: column\n",
        "* select columns\n",
        "\n",
        "```python\n",
        "states.index # rownames (index)\n",
        "states.columns # colnames\n",
        "states['area'] # select column by name\n",
        "```\n",
        "\n",
        "\n",
        "Subsetting with `loc, iloc`\n",
        "\n",
        "```python\n",
        "# implicit index\n",
        "states.iloc[:3, :2]\n",
        "\n",
        "# explicit index\n",
        "states.iloc[:'Illinois', :'pop']\n",
        "```\n",
        "\n",
        "Combine filtering\n",
        "\n",
        "```python\n",
        "states.loc[data.density > 100, ['pop', 'density']]\n",
        "```\n"
      ],
      "id": "0e03e4a0"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/chizhang/.pyenv/versions/3.12.7/envs/mypydev312/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}