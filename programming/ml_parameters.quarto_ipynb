{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Cheatsheet: ML parameters\"\n",
        "description: |\n",
        "  Refer to the jupyter notebook for rendered code.\n",
        "author: \"Chi Zhang\"\n",
        "date: \"2025-03-03\"\n",
        "categories: [Python, ML]\n",
        "sidebar: false\n",
        "code-block-bg: true\n",
        "code-block-border-left: true\n",
        "jupyter: python3\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    code-fold: false\n",
        "    code-tools: false\n",
        "    code-annotations: select\n",
        "---\n",
        "\n",
        "## Classical models\n",
        "\n",
        "|Model |Key parameters |Selection methods |Syntax |\n",
        "|--|--|--|--|\n",
        "|Linear regression |`alpha` for Ridge, Lasso |CV, AIC, BIC |`RidgeCV(alphas=[0.1, 1, 10])` |\n",
        "|Logistic regression |`C` | CV, AIC, BIC| |\n",
        "|Naive Bayes |`alpha` for Multinomial NB |GridSearchCV |`GridSearchCV(MultinomialNB(), param_grid={'alpha': [0.1, 0.5, 1]})` |\n",
        "|KNN |`n_neighbors`, `metric` (Euclidean, Manhattan) |CV | `GridSearchCV(KNeighborsClassifier(), param_grid={'n_neighbors': range(1, 50)})`|\n",
        "|SVM |`kernel`, `C`, `gamma` |GridSearchCV, RandomSearchCV | |\n",
        "|Decision Tree |`max_depth`, `min_samples_split`, `min_samples_leaf` |GridSearchCV, RandomSearchCV |`GridSearchCV(DecisionTreeClassifier(), param_grid={'max_depth': [3, 5, 10]})` |\n",
        "|Random forest |`n_estimators`, `max_depth`,`min_samples_leaf` |GridSearchCV, OOB score, feature importance |`RandomForestClassifier(n_estimators=100, oob_score=True)` |\n",
        "|Gradient boosting |`learning_rate`, `max_depth`, `n_estimators` |RandomSearchCV, Bayesian Optimization |`GridSearchCV(XGBClassifier(), param_grid={'max_depth': [3, 5, 7], 'learning_rate': [0.01, 0.1]})` |\n",
        "\n",
        "## Time series\n",
        "\n",
        "\n",
        "|Model |Key parameters |Selection methods |Syntax |\n",
        "|--|--|--|--|\n",
        "|ARIMA |`(p, d, q)` AR, differencing, MA | ACF/PACF plots, AIC, BIC | |\n",
        "|Exponential smoothing |`seasonal`, `trend` |AIC, BIC | |\n",
        "\n",
        "To be added\n",
        "\n",
        "\n",
        "## Deep learning\n",
        "\n",
        "MLP is in `sklearn`, the rest are from keras / tensorflow\n",
        "\n",
        "|Model |Key parameters |Selection methods |Syntax |\n",
        "|--|--|--|--|\n",
        "|MLP |`hidden_layer_sizes`, `activation`, `learning_rate`, `batch_size` | |`GridSearchCV(MLPClassifier(), param_grid={'hidden_layer_sizes': [(50,), (100,)]})` |\n",
        "| | | | |\n",
        "\n",
        "\n",
        "\n",
        "# Loss functions\n",
        "\n",
        "\n",
        "Regression models\n",
        "\n",
        "* MSE: $\\frac{1}{n}\\sum (y_i - \\hat{y_i})^2$\n",
        "* MSE + L1: $MSE + \\lambda \\sum |\\beta|$\n",
        "* MSE + L2: $MSE + \\lambda \\sum \\beta^2$\n",
        "* MSE + (L1, L2): weighted sum of L1 and L2\n",
        "\n",
        "Classification \n",
        "\n",
        "|Model |Loss function |Formula|\n",
        "|--|--|--|--|\n",
        "|LR | Log loss (binary cross entropy) |$-\\frac{1}{n}\\sum [y log(\\hat{y}) + (1-y) log(1-\\hat{y})]$ |\n",
        "|SVM | Hinge loss | $\\sum max(0, 1-y*\\hat{y})$|\n",
        "|Decision Tree, RF | Gini impurity  |$1-\\sum p_i^2$ |\n",
        "| | Entropy| $-\\sum p_i log p_i$|\n",
        "|KNN | 0-1 loss (misclassification rate) |$L = \\frac{1}{n}\\sum I(y_i \\neq y_i)$ |\n",
        "|NB |Log loss | |\n",
        "|XGB |Log loss (cross entropy) | $-\\sum y_i log \\hat{y_i}$ |\n",
        "\n",
        "\n",
        "# Activation functions\n",
        "\n",
        "\n",
        "\n",
        "|Activation function |Formula |Range |Pros |Cons | Use cases | \n",
        "|--|--|--|--|--|--|\n",
        "|Sigmoid |$\\frac{1}{1+e^{-x}}$ |(0,1) | | |Output layer for binary classification |\n",
        "|Softmax |$\\frac{e_i}{\\sum e_j}$ |(0,1)| | |Output layer for multi-class classification |\n",
        "|Tanh |$\\frac{e^{x} - e^{-x}}{e^{x} + e^{-x}}$ | | | |Hidden layer |\n",
        "|ReLU |max(0, x) |$[0, inf)$ |No vanishing gradient issue, efficient | |Hidden layer |\n",
        "|Leaky Relu |x if $x>0$, else $\\alpha x$ |$(-inf, inf)$ | | | Alternative to Relu for dead neurons|\n",
        "|ELU | | | | | |\n",
        "|Swish | | | | |Very deep networks |\n"
      ],
      "id": "04af4427"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/chizhang/.pyenv/versions/3.12.7/envs/mypydev312/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}